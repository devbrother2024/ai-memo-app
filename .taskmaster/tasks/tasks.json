{
  "master": {
    "tasks": [
      {
        "id": 16,
        "title": "Next.js 프로젝트 초기 설정 및 Supabase 연동",
        "description": "Next.js 풀스택 애플리케이션 기본 구조를 설정하고 Supabase 데이터베이스를 연동하여 개발 환경을 구축합니다.",
        "details": "1. Next.js 14+ 프로젝트 생성 (App Router 사용)\n2. TypeScript 설정 및 필수 의존성 설치\n3. Supabase 프로젝트 생성 및 환경변수 설정\n4. Supabase 클라이언트 초기화 및 연결 테스트\n5. 기본 폴더 구조 설정 (components, lib, types, app)\n6. Tailwind CSS 설정 (반응형 디자인 준비)\n7. ESLint, Prettier 설정\n\n```typescript\n// lib/supabase.ts\nimport { createClient } from '@supabase/supabase-js'\n\nconst supabaseUrl = process.env.NEXT_PUBLIC_SUPABASE_URL!\nconst supabaseKey = process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!\n\nexport const supabase = createClient(supabaseUrl, supabaseKey)\n```",
        "testStrategy": "1. 개발 서버 정상 실행 확인\n2. Supabase 연결 상태 테스트\n3. TypeScript 컴파일 오류 없음 확인\n4. 기본 페이지 렌더링 테스트",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 17,
        "title": "데이터베이스 스키마 설계 및 구현",
        "description": "사용자, 메모, 카테고리 테이블을 포함한 데이터베이스 스키마를 설계하고 Supabase에 구현합니다.",
        "details": "1. PRD 명세에 따른 데이터베이스 스키마 생성\n2. Supabase SQL Editor에서 테이블 생성\n3. RLS(Row Level Security) 정책 설정\n4. 인덱스 및 제약조건 설정\n\n```sql\n-- Users 테이블 (Supabase Auth 사용)\nCREATE TABLE profiles (\n  id UUID REFERENCES auth.users PRIMARY KEY,\n  email VARCHAR(255) UNIQUE NOT NULL,\n  created_at TIMESTAMP DEFAULT NOW()\n);\n\n-- Memos 테이블\nCREATE TABLE memos (\n  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),\n  user_id UUID REFERENCES profiles(id) ON DELETE CASCADE,\n  title VARCHAR(500),\n  content TEXT NOT NULL,\n  summary TEXT,\n  category VARCHAR(100),\n  created_at TIMESTAMP DEFAULT NOW(),\n  updated_at TIMESTAMP DEFAULT NOW()\n);\n\n-- 인덱스 생성\nCREATE INDEX idx_memos_user_id ON memos(user_id);\nCREATE INDEX idx_memos_category ON memos(category);\nCREATE INDEX idx_memos_created_at ON memos(created_at DESC);\n```",
        "testStrategy": "1. 테이블 생성 및 관계 설정 확인\n2. RLS 정책 동작 테스트\n3. 샘플 데이터 삽입/조회 테스트\n4. 인덱스 성능 확인",
        "priority": "high",
        "dependencies": [
          16
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 18,
        "title": "사용자 인증 시스템 구현",
        "description": "Supabase Auth를 활용한 회원가입, 로그인, JWT 기반 인증 시스템을 구현합니다.",
        "details": "1. Supabase Auth 설정 및 이메일 인증 활성화\n2. 로그인/회원가입 컴포넌트 구현\n3. 인증 상태 관리 (Context API 또는 Zustand)\n4. 보호된 라우트 구현\n5. 세션 관리 및 자동 갱신\n\n```typescript\n// hooks/useAuth.ts\nexport const useAuth = () => {\n  const [user, setUser] = useState(null)\n  const [loading, setLoading] = useState(true)\n\n  useEffect(() => {\n    const { data: { subscription } } = supabase.auth.onAuthStateChange(\n      (event, session) => {\n        setUser(session?.user ?? null)\n        setLoading(false)\n      }\n    )\n    return () => subscription.unsubscribe()\n  }, [])\n\n  const signIn = async (email: string, password: string) => {\n    return await supabase.auth.signInWithPassword({ email, password })\n  }\n\n  const signUp = async (email: string, password: string) => {\n    return await supabase.auth.signUp({ email, password })\n  }\n\n  return { user, loading, signIn, signUp }\n}\n```",
        "testStrategy": "1. 회원가입 플로우 테스트\n2. 로그인/로그아웃 기능 확인\n3. 보호된 라우트 접근 제어 테스트\n4. JWT 토큰 유효성 검증\n5. 세션 만료 처리 테스트",
        "priority": "high",
        "dependencies": [
          17
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 19,
        "title": "기본 메모 CRUD API 구현",
        "description": "메모 생성, 조회, 수정, 삭제를 위한 Next.js API Routes를 구현합니다.",
        "details": "1. API Routes 구조 설계 (/api/memos)\n2. 메모 CRUD 엔드포인트 구현\n3. 사용자 인증 미들웨어 적용\n4. 입력 데이터 검증 (Zod 사용)\n5. 에러 핸들링 및 응답 표준화\n\n```typescript\n// app/api/memos/route.ts\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const userId = await getUserFromToken(request)\n  \n  const { data: memos, error } = await supabase\n    .from('memos')\n    .select('*')\n    .eq('user_id', userId)\n    .order('created_at', { ascending: false })\n    \n  if (error) {\n    return NextResponse.json({ success: false, error: error.message }, { status: 500 })\n  }\n  \n  return NextResponse.json({ success: true, data: memos })\n}\n\nexport async function POST(request: Request) {\n  const userId = await getUserFromToken(request)\n  const body = await request.json()\n  \n  const memoSchema = z.object({\n    title: z.string().max(500).optional(),\n    content: z.string().min(1)\n  })\n  \n  const validatedData = memoSchema.parse(body)\n  \n  const { data: memo, error } = await supabase\n    .from('memos')\n    .insert({ ...validatedData, user_id: userId })\n    .select()\n    .single()\n    \n  return NextResponse.json({ success: true, data: memo })\n}\n```",
        "testStrategy": "1. 각 CRUD 엔드포인트 단위 테스트\n2. 인증되지 않은 요청 차단 확인\n3. 입력 데이터 검증 테스트\n4. 에러 응답 형식 확인\n5. Postman/Thunder Client로 API 테스트",
        "priority": "high",
        "dependencies": [
          18
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 20,
        "title": "메모 작성 및 목록 UI 컴포넌트 구현",
        "description": "사용자가 메모를 작성하고 목록을 확인할 수 있는 반응형 웹 인터페이스를 구현합니다.",
        "details": "1. 메모 작성 폼 컴포넌트 (텍스트 에디터)\n2. 메모 목록 컴포넌트 (카드 형태)\n3. 메모 상세 보기 모달/페이지\n4. 실시간 저장 기능 (debounce 적용)\n5. 로딩 상태 및 에러 처리 UI\n6. 반응형 디자인 (모바일/태블릿/데스크톱)\n\n```typescript\n// components/MemoEditor.tsx\nconst MemoEditor = () => {\n  const [content, setContent] = useState('')\n  const [title, setTitle] = useState('')\n  const [isSaving, setIsSaving] = useState(false)\n  \n  const debouncedSave = useMemo(\n    () => debounce(async (title: string, content: string) => {\n      if (content.trim()) {\n        setIsSaving(true)\n        await saveMemo({ title, content })\n        setIsSaving(false)\n      }\n    }, 1000),\n    []\n  )\n  \n  useEffect(() => {\n    debouncedSave(title, content)\n  }, [title, content, debouncedSave])\n  \n  return (\n    <div className=\"max-w-4xl mx-auto p-4\">\n      <input\n        type=\"text\"\n        placeholder=\"메모 제목 (선택사항)\"\n        value={title}\n        onChange={(e) => setTitle(e.target.value)}\n        className=\"w-full text-2xl font-bold border-none outline-none mb-4\"\n      />\n      <textarea\n        placeholder=\"메모를 작성하세요...\"\n        value={content}\n        onChange={(e) => setContent(e.target.value)}\n        className=\"w-full h-96 resize-none border-none outline-none text-lg\"\n      />\n      {isSaving && <div className=\"text-sm text-gray-500\">저장 중...</div>}\n    </div>\n  )\n}\n```",
        "testStrategy": "1. 컴포넌트 렌더링 테스트\n2. 폼 입력 및 제출 기능 확인\n3. 반응형 디자인 다양한 화면 크기 테스트\n4. 실시간 저장 기능 동작 확인\n5. 에러 상황 UI 표시 테스트",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 21,
        "title": "Anthropic Claude API 연동 및 AI 요약 기능 구현",
        "description": "Anthropic Claude API를 연동하여 메모 내용을 자동으로 요약하는 기능을 구현합니다.",
        "details": "1. Anthropic API 클라이언트 설정\n2. 요약 생성 API 엔드포인트 구현\n3. 프롬프트 엔지니어링 (한국어 요약 최적화)\n4. API 호출 최적화 (캐싱, 배치 처리)\n5. 요약 품질 검증 로직\n6. 비용 관리를 위한 토큰 수 제한\n\n```typescript\n// app/api/ai/summarize/route.ts\nimport Anthropic from '@anthropic-ai/sdk'\n\nconst anthropic = new Anthropic({\n  apiKey: process.env.ANTHROPIC_API_KEY,\n})\n\nexport async function POST(request: Request) {\n  const { content } = await request.json()\n  \n  if (content.length < 100) {\n    return NextResponse.json({ \n      success: true, \n      data: { summary: content } // 짧은 내용은 요약하지 않음\n    })\n  }\n  \n  const prompt = `다음 메모 내용을 3-5줄로 간결하게 요약해주세요. 핵심 내용과 중요한 키워드를 포함하여 한국어로 작성해주세요:\n\n${content}`\n  \n  try {\n    const message = await anthropic.messages.create({\n      model: 'claude-3-haiku-20240307',\n      max_tokens: 200,\n      messages: [{ role: 'user', content: prompt }]\n    })\n    \n    const summary = message.content[0].text\n    \n    return NextResponse.json({ \n      success: true, \n      data: { summary }\n    })\n  } catch (error) {\n    return NextResponse.json({ \n      success: false, \n      error: 'AI 요약 생성에 실패했습니다.' \n    }, { status: 500 })\n  }\n}\n```",
        "testStrategy": "1. 다양한 길이의 텍스트 요약 테스트\n2. 한국어 요약 품질 평가\n3. API 응답 시간 측정\n4. 에러 처리 (API 한도 초과, 네트워크 오류)\n5. 토큰 사용량 모니터링",
        "priority": "medium",
        "dependencies": [
          19
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 22,
        "title": "자동 카테고리 분류 시스템 구현",
        "description": "AI를 활용하여 메모 내용을 분석하고 적절한 카테고리로 자동 분류하는 시스템을 구현합니다.",
        "details": "1. 카테고리 템플릿 정의 (업무, 개인, 학습, 아이디어 등)\n2. AI 기반 카테고리 분류 API 구현\n3. 사용자 정의 카테고리 관리 기능\n4. 카테고리별 메모 필터링 UI\n5. 분류 정확도 개선을 위한 피드백 시스템\n\n```typescript\n// app/api/ai/categorize/route.ts\nconst DEFAULT_CATEGORIES = [\n  '업무', '회의', '아이디어', '학습', '개인', '할일', '메모', '기타'\n]\n\nexport async function POST(request: Request) {\n  const { content, title } = await request.json()\n  const userId = await getUserFromToken(request)\n  \n  // 사용자 정의 카테고리 조회\n  const { data: userCategories } = await supabase\n    .from('user_categories')\n    .select('name')\n    .eq('user_id', userId)\n    \n  const availableCategories = [\n    ...DEFAULT_CATEGORIES,\n    ...(userCategories?.map(c => c.name) || [])\n  ]\n  \n  const prompt = `다음 메모 내용을 분석하여 가장 적절한 카테고리 1개를 선택해주세요.\n\n제목: ${title || '없음'}\n내용: ${content}\n\n사용 가능한 카테고리: ${availableCategories.join(', ')}\n\n카테고리명만 답변해주세요:`\n  \n  const message = await anthropic.messages.create({\n    model: 'claude-3-haiku-20240307',\n    max_tokens: 50,\n    messages: [{ role: 'user', content: prompt }]\n  })\n  \n  let category = message.content[0].text.trim()\n  \n  // 유효한 카테고리인지 확인\n  if (!availableCategories.includes(category)) {\n    category = '기타'\n  }\n  \n  return NextResponse.json({ \n    success: true, \n    data: { category }\n  })\n}\n```",
        "testStrategy": "1. 다양한 주제의 메모 분류 정확도 테스트\n2. 사용자 정의 카테고리 동작 확인\n3. 분류 결과 일관성 검증\n4. 잘못된 분류에 대한 폴백 처리 테스트\n5. 카테고리별 필터링 기능 테스트",
        "priority": "medium",
        "dependencies": [
          21
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 23,
        "title": "Web Speech API 기반 음성 입력 기능 구현",
        "description": "브라우저의 Web Speech API를 활용하여 실시간 음성을 텍스트로 변환하는 STT 기능을 구현합니다.",
        "details": "1. Web Speech API 브라우저 호환성 검사\n2. 마이크 권한 요청 및 관리\n3. 실시간 STT 변환 및 텍스트 표시\n4. 음성 입력 시작/중지 UI 구현\n5. 브라우저 미지원 시 대체 방안 (외부 STT 서비스)\n6. 음성 인식 오류 처리 및 재시도 로직\n\n```typescript\n// hooks/useSpeechToText.ts\nexport const useSpeechToText = () => {\n  const [isListening, setIsListening] = useState(false)\n  const [transcript, setTranscript] = useState('')\n  const [error, setError] = useState<string | null>(null)\n  const recognitionRef = useRef<SpeechRecognition | null>(null)\n  \n  useEffect(() => {\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\n      setError('이 브라우저는 음성 인식을 지원하지 않습니다.')\n      return\n    }\n    \n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition\n    const recognition = new SpeechRecognition()\n    \n    recognition.continuous = true\n    recognition.interimResults = true\n    recognition.lang = 'ko-KR'\n    \n    recognition.onresult = (event) => {\n      let finalTranscript = ''\n      let interimTranscript = ''\n      \n      for (let i = event.resultIndex; i < event.results.length; i++) {\n        const transcript = event.results[i][0].transcript\n        if (event.results[i].isFinal) {\n          finalTranscript += transcript\n        } else {\n          interimTranscript += transcript\n        }\n      }\n      \n      setTranscript(finalTranscript + interimTranscript)\n    }\n    \n    recognition.onerror = (event) => {\n      setError(`음성 인식 오류: ${event.error}`)\n      setIsListening(false)\n    }\n    \n    recognitionRef.current = recognition\n  }, [])\n  \n  const startListening = () => {\n    if (recognitionRef.current && !isListening) {\n      setError(null)\n      setTranscript('')\n      recognitionRef.current.start()\n      setIsListening(true)\n    }\n  }\n  \n  const stopListening = () => {\n    if (recognitionRef.current && isListening) {\n      recognitionRef.current.stop()\n      setIsListening(false)\n    }\n  }\n  \n  return { isListening, transcript, error, startListening, stopListening }\n}\n```",
        "testStrategy": "1. 다양한 브라우저에서 STT 기능 테스트\n2. 마이크 권한 요청/거부 시나리오 테스트\n3. 음성 인식 정확도 평가 (다양한 발음, 속도)\n4. 네트워크 연결 불안정 시 동작 확인\n5. 긴 음성 입력 처리 테스트",
        "priority": "medium",
        "dependencies": [
          20
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 24,
        "title": "통합 검색 기능 구현",
        "description": "키워드, 카테고리, 작성일 등 다양한 조건으로 메모를 검색할 수 있는 기능을 구현합니다.",
        "details": "1. 전문 검색 API 엔드포인트 구현\n2. PostgreSQL Full-Text Search 활용\n3. 검색 필터 UI (카테고리, 날짜 범위)\n4. 검색 결과 하이라이팅\n5. 검색 기록 및 자동완성 기능\n6. 검색 성능 최적화 (인덱싱, 캐싱)\n\n```typescript\n// app/api/search/route.ts\nexport async function GET(request: Request) {\n  const { searchParams } = new URL(request.url)\n  const query = searchParams.get('q')\n  const category = searchParams.get('category')\n  const startDate = searchParams.get('start_date')\n  const endDate = searchParams.get('end_date')\n  const userId = await getUserFromToken(request)\n  \n  let searchQuery = supabase\n    .from('memos')\n    .select('*')\n    .eq('user_id', userId)\n  \n  // 키워드 검색 (PostgreSQL Full-Text Search)\n  if (query) {\n    searchQuery = searchQuery.textSearch('content', query, {\n      type: 'websearch',\n      config: 'korean'\n    })\n  }\n  \n  // 카테고리 필터\n  if (category && category !== 'all') {\n    searchQuery = searchQuery.eq('category', category)\n  }\n  \n  // 날짜 범위 필터\n  if (startDate) {\n    searchQuery = searchQuery.gte('created_at', startDate)\n  }\n  if (endDate) {\n    searchQuery = searchQuery.lte('created_at', endDate)\n  }\n  \n  const { data: results, error } = await searchQuery\n    .order('created_at', { ascending: false })\n    .limit(50)\n  \n  return NextResponse.json({ \n    success: true, \n    data: results,\n    total: results?.length || 0\n  })\n}\n```",
        "testStrategy": "1. 다양한 키워드 검색 정확도 테스트\n2. 복합 필터 조건 동작 확인\n3. 검색 결과 하이라이팅 표시 테스트\n4. 대용량 데이터에서 검색 성능 측정\n5. 특수문자, 공백 포함 검색어 처리 테스트",
        "priority": "medium",
        "dependencies": [
          22
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 25,
        "title": "배포 및 성능 최적화",
        "description": "Vercel 배포 설정과 웹 애플리케이션 성능 최적화를 수행하여 프로덕션 환경을 구축합니다.",
        "details": "1. Vercel 프로젝트 설정 및 환경변수 구성\n2. 빌드 최적화 및 번들 크기 분석\n3. 이미지 최적화 및 CDN 설정\n4. API 응답 캐싱 전략 구현\n5. 코드 스플리팅 및 지연 로딩 적용\n6. 웹 성능 지표 모니터링 설정\n7. SEO 최적화 (메타태그, 사이트맵)\n\n```typescript\n// next.config.js\nconst nextConfig = {\n  experimental: {\n    serverComponentsExternalPackages: ['@anthropic-ai/sdk']\n  },\n  images: {\n    domains: ['supabase.co'],\n    formats: ['image/webp', 'image/avif']\n  },\n  async headers() {\n    return [\n      {\n        source: '/api/:path*',\n        headers: [\n          { key: 'Cache-Control', value: 'public, max-age=300' }\n        ]\n      }\n    ]\n  },\n  webpack: (config) => {\n    config.resolve.fallback = {\n      ...config.resolve.fallback,\n      fs: false,\n    }\n    return config\n  }\n}\n\n// 성능 모니터링\nexport function reportWebVitals(metric) {\n  if (metric.label === 'web-vital') {\n    console.log(metric)\n    // Analytics 서비스로 전송\n  }\n}\n```",
        "testStrategy": "1. Lighthouse 성능 점수 측정 (90점 이상 목표)\n2. 다양한 네트워크 환경에서 로딩 속도 테스트\n3. 모바일 디바이스 성능 확인\n4. API 응답 시간 모니터링\n5. 메모리 누수 및 번들 크기 분석\n6. 프로덕션 환경 기능 동작 확인",
        "priority": "medium",
        "dependencies": [
          23,
          24
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-24T01:08:59.990Z",
      "updated": "2025-07-24T01:13:45.933Z",
      "description": "Tasks for master context"
    }
  }
}