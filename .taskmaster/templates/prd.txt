# Overview
**Memora**는 브라우저 기반 AI 음성 메모장 서비스입니다. 기존 메모 서비스가 단순 저장에 그치는 문제를 해결하여, 사용자의 음성/텍스트 입력을 AI가 자동으로 요약하고 분류해주는 지능형 메모 애플리케이션을 제공합니다.

**해결하는 문제:**
- 시간이 지날수록 중요한 정보를 찾기 어려운 기존 메모 서비스의 한계
- 회의록, 아이디어, 학습 내용 등 다양한 메모의 비체계적 관리
- 빠른 메모 작성과 효율적인 정보 검색의 어려움

**대상 사용자:**
- 직장인/프리랜서: 회의나 작업 중 빠른 메모와 자동 정리 필요
- 대학생: 수업 내용을 음성/텍스트로 기록하고 체계적으로 정리
- 일반 사용자: 일상 메모를 손쉽게 작성하고 검색

**핵심 가치:**
- STT 기반 빠른 음성 메모 작성
- AI 자동 요약 및 카테고리 분류
- 웹 접근성으로 설치 없이 즉시 사용 가능
- 체계적인 메모 관리와 효율적 검색

# Core Features

## 1. 텍스트 메모 작성
**기능:** 웹 인터페이스에서 직접 텍스트 입력
**중요성:** 기본적인 메모 작성 기능으로 모든 사용자가 익숙한 방식
**구현:** 텍스트 에디터 컴포넌트, 실시간 저장, 드래프트 기능

## 2. 음성 입력 (STT 변환)
**기능:** 마이크 입력을 실시간으로 텍스트로 변환
**중요성:** 빠른 메모 작성을 위한 핵심 차별화 기능
**구현:** Web Speech API 또는 외부 STT 서비스 연동, 실시간 텍스트 표시

## 3. AI 요약
**기능:** 긴 메모 내용을 간결한 핵심 요약으로 생성
**중요성:** 메모의 핵심 내용을 빠르게 파악할 수 있게 해주는 지능형 기능
**구현:** OpenAI GPT API 연동, 요약 알고리즘, 요약 품질 검증

## 4. 자동 카테고리 분류
**기능:** 메모 내용을 분석하여 주제별로 자동 분류
**중요성:** 체계적인 메모 관리와 효율적인 검색을 위한 필수 기능
**구현:** AI 기반 텍스트 분류, 카테고리 템플릿, 사용자 정의 카테고리

## 5. 검색 기능
**기능:** 키워드, 작성일, 카테고리별 메모 검색
**중요성:** 축적된 메모에서 필요한 정보를 빠르게 찾는 핵심 기능
**구현:** 전문 검색 엔진, 필터링, 검색 결과 하이라이팅

## 6. 데이터베이스 저장
**기능:** 모든 메모와 메타데이터를 서버 DB에 안전하게 저장
**중요성:** 데이터 영속성과 멀티 디바이스 접근을 위한 기반 기능
**구현:** 관계형 DB 설계, 백업 시스템, 데이터 암호화

# User Experience

## 사용자 여정: 웹에서 회의 내용 음성 메모
1. **로그인:** 웹 브라우저에서 Memora 접속 및 사용자 인증
2. **메모 시작:** '새 메모' 버튼 클릭, 음성/텍스트 입력 모드 선택
3. **음성 입력:** 마이크 권한 허용 후 음성 녹음 시작
4. **실시간 변환:** STT로 음성이 실시간 텍스트로 변환되어 화면에 표시
5. **자동 처리:** 메모 저장 시 AI가 자동으로 요약 생성 및 카테고리 분류
6. **결과 확인:** 원본 메모, 요약본, 분류 카테고리가 화면에 동시 표시
7. **저장 완료:** 데이터베이스에 저장되어 언제든지 웹에서 접근 가능

## UI/UX 고려사항
- **직관적 인터페이스:** 원클릭으로 음성 녹음 시작/중지
- **실시간 피드백:** STT 변환 과정과 AI 처리 상태 표시
- **반응형 디자인:** 데스크톱, 태블릿, 모바일 환경 최적화
- **접근성:** 키보드 단축키, 스크린 리더 지원

# Technical Architecture

## 시스템 컴포넌트
**프론트엔드/백엔드 (Full-stack):**
- Next.js 기반 풀스택 애플리케이션 (React + API Routes)
- Web Speech API (STT)
- 서버 컴포넌트 및 Edge Functions 활용
- JWT 기반 인증

**데이터베이스:**
- Supabase (PostgreSQL 기반, 인증 및 스토리지 포함)

**외부 서비스:**
- Anthropic Claude API (요약, 분류)
- 대체 STT 서비스 (브라우저 미지원 시)

## 데이터 모델
```sql
Users: id, email, password_hash, created_at
Memos: id, user_id, title, content, summary, category, created_at, updated_at
Categories: id, name, description, color
Tags: id, memo_id, tag_name
```

## API 설계
- `/api/auth` - 사용자 인증
- `/api/memos` - 메모 CRUD
- `/api/categories` - 카테고리 관리
- `/api/search` - 검색 기능
- `/api/ai` - AI 요약/분류 서비스

## 인프라 요구사항
- 웹 호스팅: Vercel
- 데이터베이스: Supabase (관리형 Postgres)
- CDN (정적 자원 배포)
- 모니터링 및 로깅 시스템

# Development Roadmap

## Phase 1: MVP (핵심 기능 구현)
**목표:** 기본적인 메모 작성, 저장, 조회가 가능한 웹 애플리케이션

**기능 범위:**
- 사용자 회원가입/로그인
- 텍스트 기반 메모 작성/수정/삭제
- 기본적인 메모 목록 및 상세 조회
- 간단한 키워드 검색
- 데이터베이스 기본 스키마 구현

**결과물:** 기본적인 웹 메모장으로 사용 가능한 서비스

## Phase 2: AI 기능 통합
**목표:** AI 요약 및 자동 분류 기능 추가

**기능 범위:**
- Anthropic API 연동 및 AI 요약 기능
- 자동 카테고리 분류 시스템
- 요약본과 원본 메모 동시 표시
- 카테고리별 메모 필터링
- AI 처리 상태 표시 UI

**결과물:** AI가 메모를 자동으로 정리해주는 지능형 메모장

## Phase 3: 음성 입력 기능
**목표:** STT 기반 음성 메모 작성 기능 추가

**기능 범위:**
- Web Speech API 연동
- 실시간 STT 변환 및 표시
- 음성 녹음 UI/UX 구현
- 브라우저 호환성 처리
- 음성 입력 오류 처리

**결과물:** 음성으로 빠르게 메모할 수 있는 완전한 서비스

## Phase 4: 고도화 기능
**목표:** 사용자 경험 개선 및 고급 기능 추가

**기능 범위:**
- 고급 검색 (날짜, 태그, 복합 조건)
- 사용자 통계 및 분석
- 메모 공유 기능
- 다크 모드 UI
- 성능 최적화

**결과물:** 완성도 높은 프로덕션 서비스

# Logical Dependency Chain

## 1. 기반 인프라 구축 (Foundation)
**우선순위:** 최고
**내용:** 데이터베이스 설계, 사용자 인증, 기본 API 구조
**이유:** 모든 기능의 기반이 되는 필수 인프라

## 2. 기본 메모 기능 (Core CRUD)
**의존성:** 기반 인프라
**내용:** 텍스트 메모 작성, 저장, 조회, 수정, 삭제
**이유:** 사용자에게 즉시 가치를 제공할 수 있는 최소 기능

## 3. 프론트엔드 UI 구현 (Visible Interface)
**의존성:** 기본 메모 기능
**내용:** 반응형 웹 인터페이스, 메모 목록/상세 화면
**이유:** 사용자가 실제로 서비스를 체험할 수 있는 시각적 결과물

## 4. AI 요약 기능 (Value Enhancement)
**의존성:** 기본 메모 기능
**내용:** Anthropic 연동, 요약 생성, 요약 표시 UI
**이유:** 차별화된 가치 제공, 독립적으로 개발 및 테스트 가능

## 5. 자동 분류 기능 (Organization)
**의존성:** AI 요약 기능
**내용:** 카테고리 자동 분류, 필터링 UI
**이유:** AI 인프라를 활용한 추가 기능, 메모 관리 효율성 향상

## 6. 검색 기능 (Discoverability)
**의존성:** 자동 분류 기능
**내용:** 키워드, 카테고리, 날짜별 검색
**이유:** 메모가 축적된 후 필요한 기능, 분류 데이터 활용

## 7. 음성 입력 기능 (Convenience)
**의존성:** 기본 메모 기능 (독립적)
**내용:** STT 연동, 실시간 변환, 음성 UI
**이유:** 독립적 기능으로 병렬 개발 가능, 사용성 크게 향상

## 8. 고급 기능 (Polish)
**의존성:** 모든 핵심 기능
**내용:** 통계, 공유, 고급 검색, 성능 최적화
**이유:** 서비스 완성도를 높이는 부가 기능

# Risks and Mitigations

## 기술적 도전과제

### STT 정확도 및 브라우저 호환성
**위험:** Web Speech API의 브라우저별 지원 차이 및 인식 정확도 한계
**대응방안:**
- 주요 브라우저 테스트 및 폴백 메커니즘 구현
- 외부 STT 서비스 (Google Speech-to-Text) 백업 옵션 준비
- 사용자에게 음성 입력 품질 개선 가이드 제공

### AI API 비용 및 응답 속도
**위험:** Anthropic API 사용량 증가에 따른 비용 부담 및 느린 응답 속도
**대응방안:**
- 요약 길이 제한 및 캐싱 전략 구현
- 배치 처리를 통한 API 호출 최적화
- 대안 AI 모델 (로컬 모델, 경량화 모델) 검토

### 데이터 보안 및 개인정보 보호
**위험:** 사용자의 민감한 메모 데이터 유출 위험
**대응방안:**
- 데이터 암호화 (전송/저장 시)
- GDPR 준수 개인정보 처리 정책 수립
- 정기적인 보안 감사 및 취약점 점검

## MVP 범위 설정

### 핵심 기능 우선순위 명확화
**위험:** 과도한 기능 개발로 인한 출시 지연
**대응방안:**
- Phase 1 MVP는 텍스트 메모 + 기본 AI 요약으로 제한
- 사용자 피드백을 통한 점진적 기능 확장
- 각 Phase별 성공 지표 사전 정의

### 사용자 검증 부족
**위험:** 시장 수요와 맞지 않는 기능 개발
**대응방안:**
- MVP 출시 후 조기 사용자 피드백 수집
- A/B 테스트를 통한 기능 유효성 검증
- 정기적인 사용자 인터뷰 및 설문조사

## 리소스 제약

### 개발 인력 및 시간 부족
**위험:** 계획된 일정 내 개발 완료 어려움
**대응방안:**
- 단계별 개발 및 점진적 배포 전략
- 오픈소스 라이브러리 적극 활용
- 외부 서비스 연동을 통한 개발 시간 단축

### 운영 비용 관리
**위험:** 서버 호스팅, API 사용료 등 예상보다 높은 운영 비용
**대응방안:**
- 무료 티어 활용 (Vercel, Supabase 등)
- 사용량 모니터링 및 비용 알림 설정
- 유료 전환 시점에서의 수익 모델 준비

# Appendix

## 기술 스택 선택 근거

### 프론트엔드: Next.js (React 기반)
- React 생태계 + 서버사이드 기능 통합
- 컴포넌트 기반 개발로 유지보수성 향상
- Web Speech API와의 호환성 우수

### 백엔드: Next.js API Routes
- 별도 Express 서버 없이 동일 리포지토리에서 API 구현
- Vercel Edge Runtime 지원
- Anthropic API 연동 용이성

### 데이터베이스: Supabase (PostgreSQL 기반)
- 실시간 데이터베이스 기능 및 인증 내장
- JSON 타입 지원으로 유연한 스키마 설계
- 전문 검색 기능 및 스토리지 제공

## 참고 연구 및 경쟁사 분석

### 유사 서비스 분석
- **Notion**: 강력한 블록 에디터이지만 음성 입력 부족
- **Obsidian**: 로컬 기반으로 웹 접근성 제한
- **Otter.ai**: 음성 전사에 특화, 일반 메모 기능 부족

### 차별화 포인트
- 웹 기반 접근성과 AI 자동화의 결합
- STT + AI 요약의 원스톱 솔루션
- 사용자 친화적인 인터페이스와 빠른 메모 작성 경험

## 기술 명세서

### API 응답 형식
```json
{
  "success": true,
  "data": {
    "memo": {
      "id": "uuid",
      "title": "메모 제목",
      "content": "원본 내용",
      "summary": "AI 생성 요약",
      "category": "자동 분류된 카테고리",
      "created_at": "2024-01-01T00:00:00Z"
    }
  }
}
```

### 데이터베이스 스키마
```sql
CREATE TABLE users (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  email VARCHAR(255) UNIQUE NOT NULL,
  password_hash VARCHAR(255) NOT NULL,
  created_at TIMESTAMP DEFAULT NOW()
);

CREATE TABLE memos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES users(id),
  title VARCHAR(500),
  content TEXT NOT NULL,
  summary TEXT,
  category VARCHAR(100),
  created_at TIMESTAMP DEFAULT NOW(),
  updated_at TIMESTAMP DEFAULT NOW()
);
```